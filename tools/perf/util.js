exports.mean = function mean(elems) {
  var mean =
    elems.reduce(function (prev, curr) {
      return prev + curr;
    }) / elems.length;
  return +mean.toFixed(2);
};

exports.stdev = function stdev(elems, mean) {
  var stdev =
    elems.reduce(function (prev, curr) {
      return prev + Math.pow(curr - mean, 2);
    }, Math.pow(elems[0] - mean, 2)) /
    (elems.length - 1);
  return +Math.sqrt(stdev).toFixed(2);
};

exports.meansEqual = function meansEqual(A, B, confi) {
  // a standard error is given by:  SE = s / sqrt(n)
  // below we calculate SE^2 = s^2 / n because it's used often
  var a = Math.pow(A.stdev, 2) / A.sample;
  var b = Math.pow(B.stdev, 2) / B.sample;

  var t = (A.mean - B.mean) / Math.sqrt(a + b);
  var df =
    Math.pow(a + b, 2) /
    (Math.pow(a, 2) / (A.sample - 1) + Math.pow(a, 2) / (A.sample - 1));
  return !equalRejected(t, Math.floor(df), confi * 100);
};

// The hypothesis of equal means is rejected if |t| exceeds the (1−α/2)
// quantile of a t distribution with df degrees of freedom.
function equalRejected(t, df, confi) {
  if (confi <= 0 || confi >= 100) {
    throw Error("Confidence level must be in (0, 100)");
  }
  if (df <= 30) {
    var thresholds = quantiles[df];
  } else if (df <= 130) {
    var thresholds = quantiles[Math.floor(df / 10) * 10];
  } else {
    var thresholds = quantiles.inf;
  }
  var quantile = thresholds[quantiles.lvl.indexOf(confi)];
  return Math.abs(t) > quantile;
}

var quantiles = {
  lvl: [90, 95, 98, 99, 99.5, 99.8, 99.9],
  1: [6.314, 12.71, 31.82, 63.66, 127.3, 318.3, 636.6],
  2: [2.92, 4.303, 6.965, 9.925, 14.09, 22.33, 31.6],
  3: [2.353, 3.182, 4.541, 5.841, 7.453, 10.21, 12.92],
  4: [2.132, 2.776, 3.747, 4.604, 5.598, 7.173, 8.61],
  5: [2.015, 2.571, 3.365, 4.032, 4.773, 5.893, 6.869],
  6: [1.943, 2.447, 3.143, 3.707, 4.317, 5.208, 5.959],
  7: [1.895, 2.365, 2.998, 3.499, 4.029, 4.785, 5.408],
  8: [1.86, 2.306, 2.896, 3.355, 3.833, 4.501, 5.041],
  9: [1.833, 2.262, 2.821, 3.25, 3.69, 4.297, 4.781],
  10: [1.812, 2.228, 2.764, 3.169, 3.581, 4.144, 4.587],
  11: [1.796, 2.201, 2.718, 3.106, 3.497, 4.025, 4.437],
  12: [1.782, 2.179, 2.681, 3.055, 3.428, 3.93, 4.318],
  13: [1.771, 2.16, 2.65, 3.012, 3.372, 3.852, 4.221],
  14: [1.761, 2.145, 2.624, 2.977, 3.326, 3.787, 4.14],
  15: [1.753, 2.131, 2.602, 2.947, 3.286, 3.733, 4.073],
  16: [1.746, 2.12, 2.583, 2.921, 3.252, 3.686, 4.015],
  17: [1.74, 2.11, 2.567, 2.898, 3.222, 3.646, 3.965],
  18: [1.734, 2.101, 2.552, 2.878, 3.197, 3.61, 3.922],
  19: [1.729, 2.093, 2.539, 2.861, 3.174, 3.579, 3.883],
  20: [1.725, 2.086, 2.528, 2.845, 3.153, 3.552, 3.85],
  21: [1.721, 2.08, 2.518, 2.831, 3.135, 3.527, 3.819],
  22: [1.717, 2.074, 2.508, 2.819, 3.119, 3.505, 3.792],
  23: [1.714, 2.069, 2.5, 2.807, 3.104, 3.485, 3.767],
  24: [1.711, 2.064, 2.492, 2.797, 3.091, 3.467, 3.745],
  25: [1.708, 2.06, 2.485, 2.787, 3.078, 3.45, 3.725],
  26: [1.706, 2.056, 2.479, 2.779, 3.067, 3.435, 3.707],
  27: [1.703, 2.052, 2.473, 2.771, 3.057, 3.421, 3.69],
  28: [1.701, 2.048, 2.467, 2.763, 3.047, 3.408, 3.674],
  29: [1.699, 2.045, 2.462, 2.756, 3.038, 3.396, 3.659],
  30: [1.697, 2.042, 2.457, 2.75, 3.03, 3.385, 3.646],
  40: [1.684, 2.021, 2.423, 2.704, 2.971, 3.307, 3.551],
  50: [1.676, 2.009, 2.403, 2.678, 2.937, 3.261, 3.496],
  60: [1.671, 2.0, 2.39, 2.66, 2.915, 3.232, 3.46],
  70: [1.671, 2.0, 2.39, 2.66, 2.915, 3.232, 3.46],
  80: [1.664, 1.99, 2.374, 2.639, 2.887, 3.195, 3.416],
  90: [1.664, 1.99, 2.374, 2.639, 2.887, 3.195, 3.416],
  100: [1.66, 1.984, 2.364, 2.626, 2.871, 3.174, 3.39],
  110: [1.66, 1.984, 2.364, 2.626, 2.871, 3.174, 3.39],
  120: [1.658, 1.98, 2.358, 2.617, 2.86, 3.16, 3.373],
  inf: [1.645, 1.96, 2.326, 2.576, 2.807, 3.09, 3.291],
};
